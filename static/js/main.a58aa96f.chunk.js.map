{"version":3,"sources":["focusedHOC.tsx","utils.ts","DonutChart/DonutChart.tsx","RowChart/RowChart.tsx","Axis.tsx","BarChart/BarChart.tsx","LineChart/FilterX.tsx","LineChart/Focus.tsx","LineChart/LineChart.tsx","NumberChart/NumberChart.tsx","DonutChart/DonutChartDemo.tsx","DemoContainer.tsx","LineChart/LineChartDemo.tsx","RowChart/RowCharDemo.tsx","BarChart/BarChartDemo.tsx","index.tsx"],"names":["focusedHOC","Wrapped","props","state","focused","undefined","this","onFocus","setState","React","equal","a","b","curry","fn","r","args","length","secArgs","head","value","array","newArray","slice","unshift","input","tail","push","copied","prop","name","object","updateAt","filter","x","index","map","i","max","reduce","Math","maxProp","property","d","reduceAxisLabels","width","values","ticks","ceil","label","getColour","colour","filters","isFocused","isFiltered","find","f","hsl","darker","toString","tooltipFormat","formatters","formatter","data","height","onFilter","children","valueFormat","tooltipValueFormat","radius","min","getArc","arc","outerRadius","innerRadius","getPie","pie","cursor","className","style","transform","key","defaultStyle","startAngle","endAngle","padAngle","spring","fill","stroke","strokeWidth","onClick","event","onMouseOver","onMouseOut","precision","val","circleSize","cx","cy","labelWidth","valueLabelWidth","xAxisLabel","yAxisLabel","margin","w","maxValue","leftLabelHeight","xScale","scaleLinear","range","domain","yScale","scaleBand","rangeRound","y","widthScaled","rowHeight","dy","textAnchor","XAxis","axis","updateAxis","prevProps","selected","select","call","axisBottom","scale","tickSize","tickPadding","tickFormat","rotate","selectAll","attr","axisHeightUpdated","widths","nodes","getComputedTextLength","getLabelsMaxHeight","ref","t","maxWidth","sin","abs","PI","YAxis","axisLeft","axisWidthUpdated","xAxisTicksRotate","leftAxisMaxWidth","setLeftAxisMaxWidth","bottomAxisMaxWidth","setBottomAxisMaxWidth","h","keys","scaleX","padding","scaleY","he","bottomAxisHeightUpdated","we","axisUpdated","uniqueKey","heightFinal","bandwidth","onMouseEnter","onMouseLeave","Filter","handlePadding","focusedFrom","focusedTo","opacity","x2","x1","y1","y2","Focus","LineChart","svg","focusedX","focusedY","isFiltering","isExtending","isMoving","filterStart","filterEnd","filterFocused","filterFromFocused","filterToFocused","movingFromDiff","movingToDiff","extent","position","current","getBoundingClientRect","pageX","left","invert","mousePosition","bisectValue","bisector","d0","d1","focusedNode","realX","filterFrom","filterTo","realFrom","realTo","from","to","keyFormat","valueLine","line","filterWidth","strokeLinejoin","strokeLinecap","FilterX","pointerEvents","onMouseMove","onMouseDown","onMouseUp","title","DonutChartDemo","focusedLabel","display","join","type","step","onChange","male","parseInt","target","e","floor","Component","DemoContainer","settings","useState","changes","minWidth","Object","id","checked","htmlFor","LineChartDemo","setFilter","withXLabel","withYLabel","useKeyFormat","useFilters","xLabelRotate","JSON","stringify","RowCharDemo","BarChartDemo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a58aa96f.chunk.js","sourcesContent":["import * as React from \"react\";\n\nexport interface InjectedProps {\n  focused?: string;\n  onFocus: (label: string | undefined) => void;\n}\n\ninterface State {\n  focused?: string;\n}\n\nfunction focusedHOC<P>(Wrapped: React.ComponentClass<P & InjectedProps> | React.StatelessComponent<P & InjectedProps>): React.ComponentClass<P> {\n  return class extends React.Component<P, State> {\n    constructor(props: P) {\n      super(props);\n      this.state = {\n        focused: undefined,\n      };\n    }\n\n    public render() {\n      return (\n        <Wrapped\n          {...this.props}\n          onFocus={(focused) => this.setState({ focused })}\n          focused={this.state.focused}\n        />\n      );\n    }\n  };\n}\n\nexport default focusedHOC;\n","import { hsl } from 'd3';\n\nconst equal = (a: any, b: any): boolean => a === b;\n\nexport const curry = (fn: (...x: any[]) => any) => {\n  const r = args => {\n    if (args.length >= fn.length) {\n      return fn(...args);\n    }\n    return (...secArgs) => r([...args, ...secArgs]);\n  };\n\n  return (...args) => r(args);\n};\n\nexport const prepend = curry((value: string, array: any[]): any[] => {\n  const newArray = array.slice();\n  newArray.unshift(value);\n  return newArray;\n});\n\nexport const head = (input: any) => input[0] || null;\n\nexport const tail = <T>(array: T[]): T[] => array.slice(1);\n\nexport const push = (value: any, array: any[]): any[] => {\n  const copied = array.slice();\n  copied.push(value);\n  return copied;\n};\n\nexport const prop = curry((name: string, object: object) => object[name]);\n\nexport const not = input => !input;\n\nexport const remove = curry((value: any, array: any[]): any[] => array.filter(x => !equal(x, value)));\n\ntype fnType = (x: any) => any;\n\nexport const compose = (...fns: fnType[]) => (value: any) => fns.reduceRight((args, fn) => fn(args), value);\n\nexport const updateAt = curry((index: number, value: any, array: any[]): any[] => {\n  if (array.length <= index) {\n    return updateAt(index, value, push(null, array));\n  }\n\n  return array.map((x, i) => (equal(i, index) ? value : x));\n});\n\nconst notNull = (value: any): boolean => value !== null;\n\nexport const isOdd = (value: number): boolean => value % 2 !== 0;\n\nexport const makeEven = (valueToFill: any) => (array: any[]): any[] => (isOdd(array.length) ? push(valueToFill, array) : array);\n\nexport const join = (by: string) => array => array.map(a => (a.filter(notNull).length > 1 ? a.join(by) : null)).filter(notNull);\n\nconst reduce = (fn, array: number[]) => {\n  if (array.length === 0) {\n    return 0;\n  }\n  return array.reduce(fn);\n};\n\nexport const max = (array: number[]): number => reduce((a, b) => Math.max(a, b), array);\n// const min = (array: number[]): number => reduce((a, b) => Math.min(a, b), array);\n\nexport const maxProp = (property: string, array: object[]) => max(array.map(d => d[property]));\n\nexport const reduceAxisLabels = (width: number, values: string[]): ((label: string, index: number) => string) => {\n  const spaceForText = 15;\n  const ticks = width / spaceForText;\n\n  if (values.length > ticks) {\n    const x = Math.ceil(values.length / ticks);\n    return (label: string, index: number): string => (index % x === 0 ? label : '');\n  }\n  return (label: string, index: number): string => label;\n};\n\nexport const getColour = (colour: string, label?: string, filters: string[] = [], isFocused: boolean = false): string => {\n  const isFiltered = filters.length > 0;\n  if (isFiltered && !filters.find(f => f === label)) {\n    if (isFocused) {\n      return hsl('grey')\n        .darker(0.5)\n        .toString();\n    }\n    return 'grey';\n  }\n\n  if (isFocused) {\n    return hsl(colour)\n      .darker(0.5)\n      .toString();\n  }\n  return colour;\n};\n\nexport type Optional<T> = T | undefined;\n\n/**\n * @param {number} value\n * @param {(value: number) => string[]} formatters needs to be in order in which we want to format the {value} first\n * @returns {string}\n */\nexport const tooltipFormat = (value: number, ...formatters: Array<Optional<(value: number) => string>>): string => {\n  if (formatters.length === 0) {\n    return `${value}`;\n  }\n  const formatter = head(formatters);\n  return formatter ? formatter(value) : tooltipFormat(value, ...tail(formatters));\n};\n","import { arc, pie } from \"d3\";\nimport * as React from \"react\";\nimport { Motion, spring } from \"react-motion\";\n\nimport focusedHOC, { InjectedProps } from \"../focusedHOC\";\nimport { getColour, tooltipFormat } from \"../utils\";\n\nexport interface Data {\n    label: string;\n    value: number;\n    colour: string;\n}\n\ninterface Props {\n    data: Data[];\n    width: number;\n    height: number;\n\n    filters?: string[];\n    onFilter?: (label: string) => void;\n\n    valueFormat?: (value: number) => string;\n    tooltipValueFormat?: (value: number) => string;\n    children?: any;\n}\n\nconst DonutChart = ({\n                        data = [],\n                        width,\n                        height,\n                        filters = [],\n                        onFilter,\n                        onFocus,\n                        focused,\n                        children,\n                        valueFormat,\n                        tooltipValueFormat,\n                    }: Props & InjectedProps) => {\n    const radius = Math.min(width, height) / 2;\n\n    const getArc: any = arc()\n        .outerRadius(radius)\n        .innerRadius(radius - (radius / 5));\n\n    const getPie = pie<Data>()\n        .value((d: Data): number => d.value);\n\n    const cursor = onFilter ? \"pointer\" : \"default\";\n\n    return (\n        <div className=\"DonutChart\" style={{ width }}>\n            <svg width={width} height={height}>\n                <g transform={`translate(${width / 2}, ${height / 2})`}>\n                    {getPie(data)\n                        .filter((d) => !!d.data.colour)\n                        .map((slice) => (\n                            <Motion\n                                key={`${slice.data.label}-${slice.data.value}`}\n                                defaultStyle={{\n                                    startAngle: slice.startAngle,\n                                    endAngle: slice.endAngle,\n                                    padAngle: slice.padAngle,\n                                }}\n                                style={{\n                                    startAngle: spring(slice.startAngle),\n                                    endAngle: spring(slice.endAngle),\n                                    padAngle: spring(slice.padAngle),\n                                }}\n                            >\n                                {(value) => (\n                                    <g>\n                                        <path\n                                            fill={getColour(slice.data.colour, slice.data.label, filters, slice.data.label === focused)}\n                                            d={getArc(value)}\n                                            stroke=\"white\"\n                                            strokeWidth={1}\n                                            cursor={cursor}\n                                            onClick={\n                                                onFilter\n                                                    ? (event) => onFilter(slice.data.label)\n                                                    : undefined\n                                            }\n                                            onMouseOver={() => onFocus(slice.data.label || undefined)}\n                                            onMouseOut={() => onFocus(undefined)}\n                                        />\n                                        <title>\n                                            {`${slice.data.label ? `${slice.data.label}: ` : \"\"}${tooltipFormat(slice.data.value, tooltipValueFormat, valueFormat)}` }\n                                        </title>\n                                    </g>\n                                )}\n                            </Motion>\n                        ))}\n                    {children}\n                </g>\n            </svg>\n\n            <div className=\"legend\">\n                {data.filter((d) => !!d.label).map(({ label, value, colour }, index) => (\n                    <Motion\n                        key={label}\n                        defaultStyle={{ x: 0 }}\n                        style={{ x: spring(value, { precision: 10 }) }}\n                    >\n                        {(val) => {\n                            const circleSize = label === focused ? 10 : 6;\n                            return (\n                                <div\n                                    onClick={onFilter ? () => onFilter(label) : undefined}\n                                    onMouseOver={() => onFocus(label || undefined)}\n                                    onMouseOut={() => onFocus(undefined)}\n                                    className=\"label\"\n                                    style={{ cursor }}\n                                >\n                                    <div className=\"legend-item\">\n                                        <svg height=\"20\" width=\"20\">\n                                            <Motion\n                                                defaultStyle={{ x: 0 }}\n                                                style={{ x: spring(circleSize) }}\n                                            >\n                                                {({ x }) => (\n                                                    <circle cx=\"10\" cy=\"10\" r={x} fill={colour} />\n                                                )}\n                                            </Motion>\n                                        </svg>\n                                        <div>{label}</div>\n                                        <div>{valueFormat ? valueFormat(val.x) : val.x}</div>\n                                    </div>\n                                </div>\n                            );\n                        }}\n                    </Motion>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default focusedHOC(DonutChart);\n","import { scaleBand, scaleLinear } from \"d3\";\nimport * as React from \"react\";\nimport { Motion, spring } from \"react-motion\";\n\nimport { maxProp } from \"../utils\";\nimport focusedHOC, { InjectedProps } from \"../focusedHOC\";\nimport { getColour, tooltipFormat } from \"../utils\";\n\nexport interface Data {\n    key: string;\n    value: number;\n}\n\ninterface Props {\n    data: Data[];\n    width: number;\n    colour: string;\n\n    valueFormat?: (value: number) => string;\n    tooltipValueFormat?: (value: number) => string;\n    filters?: string[];\n    onFilter?: (label: string) => void;\n    labelWidth?: number;\n    valueLabelWidth?: number;\n\n    xAxisLabel?: string;\n    yAxisLabel?: string;\n}\n\nconst RowChart: React.FC<Props & InjectedProps> = ({ data = [], width, filters = [], focused, onFilter, onFocus, colour, valueFormat, tooltipValueFormat, labelWidth = 80, valueLabelWidth = 40, xAxisLabel, yAxisLabel }) => {\n    const rowHeight = 40;\n    const height = rowHeight * data.length;\n    const margin = { top: 10, right: 10, bottom: 10, left: 10 };\n    const w = width - margin.left - margin.right;\n    const maxValue = maxProp(\"value\", data);\n    const labelsHeight = 20;\n    const labelBottomPadding = 4;\n    const valueLabelLeftPadding = 5;\n\n    const leftAxisMaxWidth = 0;\n    const tickPadding = 9;\n    const leftLabelHeight = yAxisLabel ? 19 : 0;\n\n    const xScale = scaleLinear()\n        .range([0, w - labelWidth - valueLabelWidth - valueLabelLeftPadding])\n        .domain([0, maxValue]);\n\n    const yScale = scaleBand()\n        .rangeRound([0, height - margin.top - margin.bottom])\n        .domain(data.map((d) => d.key));\n\n    return (\n        <svg width={width} height={height} className=\"RowChart\">\n            <g transform={`translate(${margin.left + leftAxisMaxWidth + tickPadding + leftLabelHeight}, ${margin.top})`}>\n                {data.map((d) => {\n                    const y = yScale(d.key) || 0;\n                    return (\n                        <g\n                            key={d.key}\n                            cursor={onFilter ? \"pointer\" : \"default\"}\n                            onClick={onFilter ? (event) => onFilter(d.key) : undefined}\n                            onMouseOver={(event) => onFocus(d.key)}\n                            onMouseOut={(event) => onFocus(undefined)}\n                        >\n                            <Motion\n                                defaultStyle={{ width: 0 }}\n                                style={{ width: spring(d.value) }}\n                            >\n                                {(style) => {\n                                    const widthScaled = xScale(style.width);\n                                    return (\n                                        <rect\n                                            fill={getColour(colour, d.key, filters, focused === d.key)}\n                                            x={labelWidth}\n                                            y={y}\n                                            width={widthScaled > 0 ? widthScaled : 0}\n                                            height={rowHeight / 2}\n                                        />\n                                    );\n                                }}\n                            </Motion>\n\n                            <text y={y + labelsHeight - labelBottomPadding} x={0}>{d.key}</text>\n\n                            <text y={y + labelsHeight - labelBottomPadding} x={xScale(maxValue) + labelWidth + valueLabelLeftPadding}>\n                                {valueFormat ? valueFormat(d.value) : d.value}\n                            </text>\n\n                            <title>\n                                {`${d.key}: ${tooltipFormat(d.value, tooltipValueFormat, valueFormat)}`}\n                            </title>\n                        </g>\n                    );\n                })}\n\n                {xAxisLabel ? (<text className=\"RowChart__label\" transform={`translate(${w / 2}, ${height})`} dy=\"-1em\" textAnchor=\"middle\">{xAxisLabel}</text>) : null}\n                {yAxisLabel ? (<text className=\"RowChart__label\" transform=\"rotate(-90)\" x={-(height / 2)} y={-leftAxisMaxWidth} dy=\"-1em\" textAnchor=\"middle\">{yAxisLabel}</text>) : null}\n\n            </g>\n        </svg>\n    );\n};\n\nexport default focusedHOC(RowChart);\n","import * as React from \"react\";\n\nimport { axisBottom, axisLeft, ScaleBand, ScaleLinear, select } from \"d3\";\nimport { max } from \"./utils\";\n\ninterface XAxisProps {\n    scale: ScaleBand<string>;\n    height: number;\n    tickFormat?: (value: string, index: number) => string;\n    rotate?: number;\n    axisHeightUpdated?: (labelMaxWidth: number) => void;\n}\n\nexport class XAxis extends React.Component<XAxisProps, {}> {\n    // @ts-ignore\n    private axis: SVGGElement | null;\n\n    public componentDidMount() {\n        this.updateAxis();\n    }\n\n    public componentDidUpdate(prevProps: XAxisProps) {\n        this.updateAxis();\n    }\n\n    public updateAxis() {\n        // @ts-ignore\n        const selected = select(this.axis).call(axisBottom(this.props.scale).tickSize(0).tickPadding(6).tickFormat(this.props.tickFormat));\n\n        if (this.props.rotate) {\n            selected.selectAll(\"g.tick text\")\n                .style(\"text-anchor\", \"end\")\n                .attr(\"dx\", \"-10\")\n                .attr(\"dy\", \"0\")\n                .attr(\"transform\", `rotate(${this.props.rotate})`);\n\n            if (this.props.axisHeightUpdated) {\n                // @ts-ignore\n                const widths = selected.selectAll(\"g.tick text\").nodes().map((d: SVGTextContentElement) => d.getComputedTextLength());\n                this.props.axisHeightUpdated(this.getLabelsMaxHeight(widths));\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <g transform={`translate(0,${this.props.height})`} ref={(t) => (this.axis = t)} />\n        );\n    }\n\n    private getLabelsMaxHeight(widths: number[]): number {\n        const maxWidth = max(widths);\n        if (this.props.rotate) {\n            // calculate right height by sin(angle) * maxWidth\n            return Math.sin(Math.abs(this.props.rotate) * Math.PI / 180) * maxWidth;\n        }\n        return 0;\n    }\n}\n\ninterface YAxisProps {\n    scale: ScaleLinear<number, any | {}>;\n    axisWidthUpdated?: (labelMaxWidth: number) => void;\n    tickFormat?: (value: number) => string;\n}\n\nexport class YAxis extends React.Component<YAxisProps, {}> {\n    // @ts-ignore\n    private axis: SVGGElement | null;\n\n    public componentDidMount() {\n        this.updateAxis();\n    }\n\n    public componentDidUpdate(prevProps: YAxisProps) {\n        this.updateAxis();\n    }\n\n    public updateAxis() {\n        // @ts-ignore\n        const axis = select(this.axis).call(axisLeft(this.props.scale).tickFormat(this.props.tickFormat || null));\n\n        if (this.props.axisWidthUpdated) {\n            // @ts-ignore\n            const widths = axis.selectAll(\"g.tick text\").nodes().map((d: SVGTextContentElement) => d.getComputedTextLength());\n\n            this.props.axisWidthUpdated(max(widths));\n        }\n    }\n\n    public render() {\n        return <g ref={(t) => (this.axis = t)} />;\n    }\n}\n","import * as React from \"react\";\nimport { Motion, spring } from \"react-motion\";\n\nimport { scaleBand, scaleLinear } from \"d3\";\n\nimport { getColour, maxProp, prop, reduceAxisLabels, tooltipFormat } from \"../utils\";\nimport { XAxis, YAxis } from \"../Axis\";\nimport focusedHOC, { InjectedProps } from \"../focusedHOC\";\n\nexport interface Data {\n    uniqueKey?: string;\n    key: string;\n    value: number;\n}\n\ninterface Props {\n    data: Data[];\n    width: number;\n    height: number;\n    colour: string;\n\n    valueFormat?: (value: number) => string;\n    tooltipValueFormat?: (value: number) => string;\n    xAxisTicksRotate?: number;\n    xAxisLabel?: string;\n    yAxisLabel?: string;\n    filters?: string[];\n    onFilter?: (key: string) => void;\n}\n\nconst BarChart: React.FC<Props & InjectedProps> = ({ width, height, data, filters, colour, focused, valueFormat, tooltipValueFormat, onFilter, onFocus, xAxisTicksRotate, xAxisLabel, yAxisLabel }) => {\n    const [leftAxisMaxWidth, setLeftAxisMaxWidth] = React.useState(0);\n    const [bottomAxisMaxWidth, setBottomAxisMaxWidth] = React.useState(0);\n\n    const margin = { top: 10, right: 10, bottom: 10, left: 10 };\n    const tickPadding = 9;\n    const leftLabelHeight = yAxisLabel ? 19 : 0;\n    const bottomLabelHeight = xAxisLabel ? 19 : 0;\n    const w = width - margin.left - margin.right - leftAxisMaxWidth - tickPadding - leftLabelHeight;\n    const h = height - margin.top - margin.bottom - bottomAxisMaxWidth - tickPadding - bottomLabelHeight;\n    const keys = data.map(prop(\"key\")) as string[];\n\n    const scaleX = scaleBand()\n        .range([0, w])\n        .padding(0.1)\n        .domain(keys);\n    const scaleY = scaleLinear()\n        .range([h, 0])\n        .domain([0, maxProp(\"value\", data)]);\n\n    const axisUpdated = (width: number) => {\n        if (leftAxisMaxWidth !== width) {\n            setLeftAxisMaxWidth(width)\n        }\n    };\n\n    const bottomAxisHeightUpdated = (height: number) => {\n        if (bottomAxisMaxWidth !== height) {\n            setBottomAxisMaxWidth(width)\n        }\n    };\n\n    return (\n        <svg width={width} height={height} className=\"BarChart\">\n            <g transform={`translate(${margin.left + leftAxisMaxWidth + tickPadding + leftLabelHeight}, ${margin.top})`}>\n                <XAxis\n                    height={h}\n                    scale={scaleX}\n                    rotate={xAxisTicksRotate}\n                    tickFormat={reduceAxisLabels(w, keys)} axisHeightUpdated={(he) => bottomAxisHeightUpdated(he)}\n                />\n                <YAxis scale={scaleY} tickFormat={valueFormat} axisWidthUpdated={(we) => axisUpdated(we)} />\n\n                {data.map(({ key, value, uniqueKey }) => (\n                    <g key={uniqueKey || `${key}-${value}`}>\n                        <Motion defaultStyle={{ x: h }} style={{ x: spring(scaleY(value)) }}>\n                            {({ x }) => {\n                                const heightFinal = h - x;\n                                return (\n                                    <rect\n                                        x={scaleX(key)}\n                                        y={x}\n                                        cursor={onFilter ? \"pointer\" : \"default\"}\n                                        width={scaleX.bandwidth()}\n                                        height={heightFinal > 0 ? heightFinal : 0}\n                                        fill={getColour(colour, key, filters, focused === key)}\n                                        onClick={onFilter ? () => onFilter(key) : undefined}\n                                        onMouseEnter={() => onFocus(key)}\n                                        onMouseLeave={() => onFocus(undefined)}\n                                    />\n                                );\n                            }}\n                        </Motion>\n\n                        <title>\n                            {`${key}: ${tooltipFormat(value, tooltipValueFormat, valueFormat)}`}\n                        </title>\n                    </g>\n                ))}\n\n                {xAxisLabel ? (<text className=\"BarChart__label\" transform={`translate(${w / 2}, ${height})`} dy=\"-1em\"\n                                     textAnchor=\"middle\">{xAxisLabel}</text>) : null}\n                {yAxisLabel ? (\n                    <text className=\"BarChart__label\" transform=\"rotate(-90)\" x={-(height / 2)} y={-leftAxisMaxWidth}\n                          dy=\"-1em\" textAnchor=\"middle\">{yAxisLabel}</text>) : null}\n            </g>\n        </svg>\n    );\n}\n\nexport default focusedHOC(BarChart);\n","import * as React from \"react\";\n\ninterface Props {\n  height: number;\n  width: number;\n  x: number;\n  colour: string;\n  handlePadding: number;\n\n  focusedFrom: boolean;\n  focusedTo: boolean;\n}\n\nconst Filter = ({\n  height,\n  width,\n  x,\n  colour,\n  handlePadding,\n  focusedFrom,\n  focusedTo,\n}: Props) => {\n  const strokeWidth = handlePadding * 2;\n  return (\n    <g>\n      <rect\n        x={x}\n        y={0}\n        width={width}\n        height={height}\n        cursor=\"move\"\n        fill={colour}\n        opacity={0.5}\n      />\n      <line\n        x2={x}\n        x1={x}\n        y1={0}\n        y2={height}\n        stroke={focusedFrom ? \"grey\" : \"lightgrey\"}\n        strokeWidth={strokeWidth}\n      />\n      <line\n        x2={x + width}\n        x1={x + width}\n        y1={0}\n        y2={height}\n        stroke={focusedTo ? \"grey\" : \"lightgrey\"}\n        strokeWidth={strokeWidth}\n      />\n    </g>\n  );\n};\n\nexport default Filter;\n","import * as React from \"react\";\n\ninterface Props {\n  height: number;\n  x: number;\n  y: number;\n}\n\nconst Focus = ({ height, x, y }: Props) => (\n  <g>\n    <line x1={0} x2={x} y1={y} y2={y} stroke=\"lightgrey\" strokeWidth=\"1\" />\n    <line x1={x} x2={x} y1={y} y2={height} stroke=\"lightgrey\" strokeWidth=\"1\" />\n    <circle r={4} cx={x} cy={y} />\n  </g>\n);\n\nexport default Focus;\n","import * as React from \"react\";\n\nimport { bisector, extent, line, scaleLinear, } from \"d3\";\n\nimport { XAxis, YAxis } from \"../Axis\";\nimport FilterX from \"./FilterX\";\nimport Focus from \"./Focus\";\n\nconst margin = { top: 10, right: 10, bottom: 20, left: 20 };\n\nconst filterHandlePadding = 2; // px\n\nconst xAxisHeight = 20;\nconst yAxisWidth = 20;\n\nexport interface Data {\n    key: number;\n    value: number;\n}\n\nexport interface Filter {\n    from?: number;\n    to?: number;\n}\n\ninterface Props {\n    data: Data[];\n    width: number;\n    height: number;\n    colour: string;\n    onFilter?: (filter: Filter) => void;\n    filterFrom?: number;\n    filterTo?: number;\n    valueFormat?: (value: number) => string;\n    keyFormat?: (value: string, index: number) => string;\n\n    xAxisTicksRotate?: number;\n    xAxisLabel?: string;\n    yAxisLabel?: string;\n}\n\ninterface State {\n    focusedX: number;\n    focusedY: number;\n\n    isFocused: boolean;\n    isFiltering: boolean;\n    isExtending: boolean;\n    isMoving: boolean;\n\n    filterStart?: number;\n    filterEnd?: number;\n\n    filterFocused: boolean;\n    filterFromFocused: boolean;\n    filterToFocused: boolean;\n\n    movingFromDiff?: number;\n    movingToDiff?: number;\n}\n\nclass LineChart extends React.Component<Props, State> {\n    private svg = React.createRef<any>();\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            focusedX: 0,\n            focusedY: 0,\n\n            isFocused: false,\n            isFiltering: false,\n            isExtending: false,\n            isMoving: false,\n\n            filterStart: 0,\n            filterEnd: 0,\n\n            filterFocused: false,\n            filterFromFocused: false,\n            filterToFocused: false,\n\n            movingFromDiff: undefined,\n            movingToDiff: undefined,\n        };\n    }\n\n    public scaleX() {\n        const w = this.props.width - margin.left - margin.right - yAxisWidth;\n\n        return scaleLinear()\n            .rangeRound([0, w])\n            .domain(extent(this.props.data, (d) => d.key) as number[]);\n    }\n\n    public scaleY() {\n        const h = this.props.height - margin.top - margin.bottom - xAxisHeight;\n        return scaleLinear()\n            .rangeRound([h, 0])\n            .domain(extent(this.props.data, (d) => d.value) as number[]);\n    }\n\n    public mousePosition(event: MouseEvent) {\n        const position = this.svg.current.getBoundingClientRect();\n        const x = event.pageX - margin.left - yAxisWidth - position.left;\n\n        return this.scaleX().invert(x);\n    }\n\n    public onMouseMove(event: MouseEvent) {\n        const x = this.mousePosition(event);\n\n        if (this.state.isMoving) {\n            this.setState({\n                filterStart: x - (this.state.movingFromDiff || 0),\n                filterEnd: x + (this.state.movingToDiff || 0),\n            });\n        } else if (this.state.isExtending) {\n            this.setState({\n                filterEnd: x,\n            });\n        } else if (this.state.isFiltering) {\n            this.setState({\n                filterEnd: x,\n                filterToFocused: true,\n            });\n        } else if (this.state.isFocused) {\n            const { data } = this.props;\n\n            const bisectValue = bisector((d: Data) => d.key).left;\n\n            const i = bisectValue(data, x);\n            const d0 = data[i - 1];\n            const d1 = data[i];\n\n            if (!d0) {\n                return;\n            }\n            if (!d1) {\n                return;\n            }\n\n            const focusedNode = x - d0.key > d1.key - x ? d1 : d0;\n\n            const scaleX = this.scaleX();\n            const realX = scaleX(x);\n\n            let filterFocused = false;\n            let filterToFocused = false;\n            let filterFromFocused = false;\n            if (this.props.filterFrom && this.props.filterTo) {\n                const realFrom = scaleX(this.props.filterFrom);\n                const realTo = scaleX(this.props.filterTo);\n\n                if (\n                    realX - filterHandlePadding < realTo &&\n                    realTo < realX + filterHandlePadding\n                ) {\n                    filterToFocused = true;\n                } else if (\n                    realX - filterHandlePadding < realFrom &&\n                    realFrom < realX + filterHandlePadding\n                ) {\n                    filterFromFocused = true;\n                } else if (\n                    realFrom + filterHandlePadding <= realX &&\n                    realX <= realTo - filterHandlePadding\n                ) {\n                    filterFocused = true;\n                }\n            }\n\n            this.setState({\n                focusedX: scaleX(focusedNode.key),\n                focusedY: this.scaleY()(focusedNode.value),\n                filterFocused,\n                filterFromFocused,\n                filterToFocused,\n            });\n        }\n    }\n\n    public onMouseDown(event: MouseEvent) {\n        const x = this.mousePosition(event);\n\n        if (this.state.filterFocused) {\n            this.setState({\n                filterStart: this.props.filterFrom,\n                filterEnd: this.props.filterTo,\n                isMoving: true,\n                movingFromDiff: x - (this.props.filterFrom || 0),\n                movingToDiff: (this.props.filterTo || 0) - x,\n                isFocused: false,\n            });\n        } else if (this.state.filterToFocused) {\n            // extending from Right\n            this.setState({\n                filterStart: this.props.filterFrom,\n                filterEnd: this.props.filterTo,\n                isExtending: true,\n                isFocused: false,\n            });\n        } else if (this.state.filterFromFocused) {\n            // extending from Left\n            this.setState({\n                filterStart: this.props.filterTo,\n                filterEnd: this.props.filterFrom,\n                isExtending: true,\n                isFocused: false,\n            });\n        } else {\n            // filtering\n            this.setState({\n                filterStart: x,\n                filterEnd: x,\n                isFiltering: true,\n                isFocused: false,\n            });\n        }\n    }\n\n    public onMouseUp() {\n        if (this.props.onFilter) {\n            const { filterStart, filterEnd } = this.state;\n\n            let from = filterStart;\n            let to = filterEnd;\n            if (filterStart && filterEnd && filterStart > filterEnd) {\n                from = filterEnd;\n                to = filterStart;\n            } else if (from === to) {\n                from = undefined;\n                to = undefined;\n            }\n\n            if (!from || !to) {\n                from = undefined;\n                to = undefined;\n            }\n\n            this.props.onFilter({ from, to });\n        }\n\n        this.setState({\n            filterStart: undefined,\n            filterEnd: undefined,\n            isFocused: true,\n            isFiltering: false,\n            isExtending: false,\n            isMoving: false,\n            movingFromDiff: undefined,\n            movingToDiff: undefined,\n        });\n    }\n\n    public cursor() {\n        if (!this.props.onFilter) {\n            return \"default\";\n        }\n        if (this.state.filterFocused) {\n            return \"move\";\n        }\n\n        if (this.state.filterFromFocused) {\n            return \"ew-resize\";\n        }\n\n        if (this.state.filterToFocused) {\n            return \"ew-resize\";\n        }\n        return \"crosshair\";\n    }\n\n    public render() {\n        const { data, width, height, xAxisLabel, yAxisLabel, valueFormat, keyFormat, colour } = this.props;\n        const h = height - margin.top - margin.bottom - xAxisHeight;\n        const scaleX = this.scaleX();\n\n        const valueLine: any = line()\n            .x((d: any) => scaleX(d.key))\n            .y((d: any) => this.scaleY()(d.value));\n\n        const filterFrom = this.props.filterFrom || 0;\n        const filterTo = this.props.filterTo || 0;\n\n        let filterStart = scaleX(Math.min(filterFrom, filterTo));\n        let filterWidth = Math.abs(scaleX(filterFrom) - scaleX(filterTo));\n\n        if (\n            this.state.isFiltering ||\n            this.state.isExtending ||\n            this.state.isMoving\n        ) {\n            filterStart = scaleX(\n                Math.min(this.state.filterStart || 0, this.state.filterEnd || 0),\n            );\n            filterWidth =\n                this.state.filterEnd === 0\n                    ? 0\n                    : Math.abs(\n                    scaleX(this.state.filterStart || 0) -\n                    scaleX(this.state.filterEnd || 0),\n                    );\n        }\n\n        const isFiltered = this.state.isFiltering || this.state.isExtending || filterFrom;\n\n        return (\n            <svg width={width} height={height} ref={this.svg}>\n                <g transform={`translate(${margin.left + yAxisWidth}, ${margin.top})`}>\n                    <XAxis height={h} scale={this.scaleX() as any} tickFormat={keyFormat}\n                           rotate={this.props.xAxisTicksRotate} />\n                    <YAxis scale={this.scaleY()} tickFormat={valueFormat} />\n\n                    <path\n                        d={valueLine(data)}\n                        fill=\"none\"\n                        stroke={colour}\n                        strokeWidth={1.5}\n                        strokeLinejoin=\"round\"\n                        strokeLinecap=\"round\"\n                    />\n\n                    {this.state.isFocused ? (\n                        <Focus x={this.state.focusedX} y={this.state.focusedY} height={h} />) : null}\n                    {isFiltered ? (\n                        <FilterX\n                            height={h}\n                            x={filterStart}\n                            width={filterWidth}\n                            colour={colour}\n                            handlePadding={filterHandlePadding}\n                            focusedFrom={this.state.filterFromFocused}\n                            focusedTo={this.state.filterToFocused}\n                        />\n                    ) : null}\n\n                    <rect\n                        fill=\"none\"\n                        pointerEvents=\"all\"\n                        cursor={this.cursor()}\n                        width={width - margin.left - margin.right - yAxisWidth}\n                        height={height - margin.top - margin.bottom}\n                        onMouseMove={(event: any) => this.onMouseMove(event)}\n                        onMouseOut={() => this.setState({ isFocused: false })}\n                        onMouseOver={() => this.setState({ isFocused: true })}\n                        onMouseDown={(event: any) => this.props.onFilter ? this.onMouseDown(event) : null}\n                        onMouseUp={(event: any) => this.props.onFilter ? this.onMouseUp() : null}\n                    />\n\n                    {xAxisLabel ? <text transform={`translate(${width / 2}, ${height})`} dy=\"-1em\"\n                                        textAnchor=\"middle\">{xAxisLabel}</text> : null}\n\n                    {yAxisLabel ? <text transform=\"rotate(-90)\" y={-10} x={-(height / 2)} dy=\"-1em\"\n                                        textAnchor=\"middle\">{yAxisLabel}</text> : null}\n\n                </g>\n            </svg>\n        );\n    }\n}\n\nexport default LineChart;\n","import * as React from \"react\";\n\nimport focusedHOC from \"../focusedHOC\";\nimport { tooltipFormat } from \"../utils\";\n\ninterface Props {\n    value: number;\n    label?: string;\n\n    valueFormat?: (value: number) => string;\n    tooltipValueFormat?: (value: number) => string;\n}\n\nconst NumberChart: React.FC<Props> = ({ value, label, valueFormat, tooltipValueFormat, children }) => {\n\n    return (\n        <div className=\"NumberChart\"\n             title={`${label ? `${label}: ` : \"\"}${tooltipFormat(value, tooltipValueFormat, valueFormat)}`}>\n            {children}\n            <div className=\"value\">\n                {valueFormat ? valueFormat(value) : value}\n            </div>\n        </div>\n    );\n};\n\nexport default focusedHOC(NumberChart);\n","import React, { Component } from 'react';\nimport { DonutChart } from '../export';\nimport { Data } from './DonutChart';\n\nconst data = [\n    {\n        label: \"male\",\n        value: 30,\n        colour: \"#88BB88\"\n    },\n    {\n        label: \"female\",\n        value: 60,\n        colour: \"#8888CC\"\n    },\n    {\n        label: \"unknown\",\n        value: 10,\n        colour: \"#AA8888\"\n    }\n];\n\ninterface IState {\n    width: number;\n    data: Data[];\n    filters: string[];\n    focusedLabel?: string;\n}\n\n\nclass DonutChartDemo extends Component<object, IState> {\n\n    constructor(props: object) {\n        super(props);\n        this.state = {\n            width: 300,\n            data,\n            filters: [],\n            focusedLabel: undefined\n        }\n    }\n\n    public filter(label: string) {\n        const { filters } = this.state;\n        if (filters.find(r => r === label)) {\n            this.setState({\n                filters: filters.filter(d => d !== label)\n            })\n        } else {\n            filters.push(label);\n            this.setState({\n                filters\n            })\n        }\n    }\n\n    public render() {\n        // console.log(this.state.width)\n        return (\n            <div style={{ display: 'flex'}}>\n                <div style={{ width: \"300px\" }}>\n                    <p>filters</p>\n                    [{this.state.filters.map(f => (`\"${f}\"`)).join(\", \")}]\n                    <button onClick={() => this.setState({ filters: [] })}>reset</button>\n\n                    <p>values</p>\n                    <input type=\"range\" min=\"0\" max=\"90\" step=\"1\" onChange={(event) => {\n                        const male = parseInt(event.target.value, 10);\n                        this.setState({\n                            data: this.state.data.map(e => {\n                                if (e.label === \"male\") { return { ...e, value: male } }\n                                if (e.label === \"female\") { return { ...e, value: 100 - 10 - male } }\n\n                                return e;\n                            })\n                        })\n                    }}\n                    />\n\n                    <p>width: {this.state.width}px</p>\n                    <input type=\"range\" min=\"50\" max=\"400\" step=\"10\" value={this.state.width} onChange={(event) => {\n                        this.setState({\n                            width: parseInt(event.target.value, 10)\n                        })\n                    }}\n                    />\n                </div>\n                <div style={{ width: '400px' }}>\n                    <DonutChart\n                        width={this.state.width}\n                        height={200}\n                        data={this.state.data}\n                        filters={this.state.filters}\n                        onFilter={(label) => this.filter(label)}\n                        valueFormat={(x) => `${Math.floor(x)}%`}\n\n                        // onMouseOver={(label) => this.setState({ focusedLabel: label })}\n                        // onMouseOut={(label) => this.setState({ focusedLabel: undefined })}\n                        // focusedLabel={this.state.focusedLabel}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default DonutChartDemo;\n","import React from 'react';\n\ninterface IProps<T> {\n    title: string;\n    settings: T;\n    children: (settings: T) => any;\n\n}\n\nconst DemoContainer = <T extends object>({ children, title, settings }: IProps<T>) => {\n    const [changes, onChange] = React.useState<T>(settings);\n\n    return (\n        <div>\n            <h2>{title}</h2>\n            <div style={{ display: 'flex' }}>\n                <div style={{ minWidth: '300px' }}>\n                    {Object.keys(changes).map(key => {\n                        const id = `${title}=${key}`;\n                        return (\n                            <div key={`${id}-key`}>\n                                <input type=\"checkbox\" id={id} checked={changes[key]}\n                                       onChange={({ target }) => onChange({ ...changes, [key]: target.checked })} />\n                                <label htmlFor={id}>{key}</label>\n                            </div>\n                        )\n                    })}\n                </div>\n                <div>\n                    {children(changes)}\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default DemoContainer;\n","import React from 'react';\nimport { LineChart } from '../export';\nimport DemoContainer from '../DemoContainer';\n\nconst data = [\n    {\n        key: 1,\n        value: 50,\n    },\n    {\n        key: 2,\n        value: 20,\n    },\n    {\n        key: 3,\n        value: 40,\n    },\n    {\n        key: 5,\n        value: 30,\n    },\n    {\n        key: 6,\n        value: 10,\n    }\n];\n\nconst LineChartDemo = () => {\n    const [filter, setFilter] = React.useState<any>({ from: 3, to: 5 });\n\n    return (\n        <div>\n            <DemoContainer title=\"Line chart\" settings={{ withXLabel: true, withYLabel: true, useKeyFormat: false, useFilters: true, xLabelRotate: false }}>\n                {(settings) => {\n                    return (\n                        <div>\n                            <LineChart\n                                data={data}\n                                height={300}\n                                width={500}\n                                yAxisLabel={settings.withYLabel ? \"Y label\" : undefined}\n                                xAxisLabel={settings.withXLabel ? \"X label\" : undefined}\n                                colour=\"green\"\n                                onFilter={settings.useFilters ? ({ from, to }) => setFilter({ from, to }) : undefined}\n                                filterFrom={settings.useFilters ? filter.from : undefined}\n                                filterTo={settings.useFilters ? filter.to : undefined}\n                                keyFormat={settings.useKeyFormat ? (value) => `${value},-` : undefined}\n                                xAxisTicksRotate={settings.xLabelRotate ? -45 : undefined}\n                            />\n                            {settings.useFilters && <pre>{JSON.stringify(filter)}</pre>}\n                        </div>\n                    )\n                }}\n            </DemoContainer>\n        </div>\n    )\n};\n\nexport default LineChartDemo;\n","import React from 'react';\nimport { RowChart } from '../export';\nimport DemoContainer from '../DemoContainer';\n\nconst data = [\n    {\n        key: \"a\",\n        value: 50,\n    },\n    {\n        key: \"b\",\n        value: 20,\n    },\n    {\n        key: \"c\",\n        value: 40,\n    },\n    {\n        key: \"d\",\n        value: 10,\n    }\n];\n\n\nconst RowCharDemo: React.FC = () => {\n    return (\n        <DemoContainer title=\"Row chart\" settings={{ withXLabel: true, withYLabel: true }}>\n            {(settings) => (\n\n                <RowChart\n                    data={data}\n                    width={400}\n                    yAxisLabel={settings.withYLabel ? \"Y label\" : undefined}\n                    xAxisLabel={settings.withXLabel ? \"X label\" : undefined}\n                    colour=\"green\"\n                />\n            )}\n        </DemoContainer>\n    );\n};\n\nexport default RowCharDemo;\n","import React from 'react';\nimport { BarChart } from '../export';\nimport DemoContainer from '../DemoContainer';\n\nconst BarChartDemo: React.FC = () => {\n\n    const data = [{ key: '8', value: 8 }, { key: '10', value: 10 }];\n\n    return (\n        <DemoContainer title=\"Bar chart\" settings={{ withXLabel: true, withYLabel: true }}>\n            {(settings) => (\n                <BarChart\n                    data={data}\n                    height={300}\n                    width={300}\n                    colour=\"green\"\n                    yAxisLabel={settings.withYLabel ? \"Y label\" : undefined}\n                    xAxisLabel={settings.withXLabel ? \"X label\" : undefined}\n                />)}\n        </DemoContainer>\n    );\n};\n\nexport default BarChartDemo;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport DonutChartDemo from './DonutChart/DonutChartDemo';\nimport LineChartDemo from './LineChart/LineChartDemo';\nimport RowCharDemo from './RowChart/RowCharDemo';\nimport BarChartDemo from './BarChart/BarChartDemo';\nimport { NumberChart } from './export';\n\nconst App = () => (\n    <div>\n        <h3>Donut chart</h3>\n        <DonutChartDemo />\n\n        <LineChartDemo />\n\n        <RowCharDemo />\n\n        <BarChartDemo  />\n\n        <h3>Number chart</h3>\n        <NumberChart value={50} />\n    </div>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}