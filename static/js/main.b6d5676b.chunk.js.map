{"version":3,"sources":["DemoContainer.tsx","DonutChart/DonutChartDemo.tsx","LineChart/LineChartDemo.tsx","RowChart/RowCharDemo.tsx","BarChart/BarChartDemo.tsx","NumberChart/NumberChartDemo.tsx","index.tsx","utils.ts","Axis/YAxis.tsx","Axis/tools.ts","Axis/XAxis.tsx","DonutChart/DonutChart.tsx","RowChart/RowChart.tsx","BarChart/BarChart.tsx","export.ts","NumberChart/NumberChart.tsx","LineChart/FilterX.tsx","LineChart/Focus.tsx","LineChart/LineChart.tsx","focusedHOC.tsx"],"names":["DemoContainer","children","title","settings","data","React","useState","changes","onChange","input","setInput","isInvalid","setIsInvalid","style","margin","display","justifyContent","Object","keys","map","key","id","type","checked","target","htmlFor","value","parseInt","height","rows","cols","event","parsed","JSON","parse","error","defaultValue","stringify","label","colour","DonutChartDemo","filters","setFilters","customValueFormat","filterable","maxTableRows","width","undefined","onFilter","find","r","filter","d","valueFormat","x","Math","floor","LineChartDemo","from","to","setFilter","withXLabel","withYLabel","useKeyFormat","useFilters","xLabelRotate","xAxisTicksTooltip","yAxisLabel","xAxisLabel","filterFrom","filterTo","keyFormat","xAxisTicksRotate","RowCharDemo","yLabelCustomWidth","xLabelCustomWidth","customToolTipFormat","labelWidth","valueLabelWidth","val","tooltipValueFormat","BarChartDemo","colours","length","substring","xAxisTicksTooltipFormat","NumberChartDemo","useCustomLabel","useCustomValueFormat","color","App","padding","ReactDOM","render","document","getElementById","equal","a","b","curry","fn","args","secArgs","head","array","newArray","slice","unshift","tail","push","copied","prop","name","object","updateAt","index","i","max","reduce","maxProp","property","reduceAxisLabels","values","ticks","ceil","getColour","isFocused","isFiltered","f","hsl","darker","toString","tooltipFormat","formatters","formatter","YAxis","axis","this","updateAxis","prevProps","select","call","axisLeft","props","scale","tickFormat","axisWidthUpdated","widths","selectAll","nodes","getComputedTextLength","ref","t","LetterWidths","letter","L","X","c","e","M","g","h","XS","j","S","k","l","m","XL","n","o","p","q","s","u","v","w","y","z","XAxis","state","selected","axisBottom","tickSize","tickPadding","format","attr","rotate","axisHeightUpdated","getLabelsMaxHeight","text","transform","onMouseOver","getAttribute","setState","onMouseOut","Array","all","current","fill","stroke","strokeWidth","strokeOpacity","fillOpacity","fontSize","maxWidth","sin","abs","PI","focusedHOC","onFocus","focused","cursor","donutHeight","donutWidth","getPie","pie","radius","min","getArc","arc","outerRadius","innerRadius","className","defaultStyle","startAngle","endAngle","padAngle","spring","onClick","cellSpacing","cellPadding","border","borderCollapse","precision","circleSize","rowHeight","cx","cy","maxValue","leftLabelHeight","xScale","scaleLinear","range","domain","yScale","scaleBand","rangeRound","widthScaled","dy","textAnchor","leftAxisMaxWidth","setLeftAxisMaxWidth","bottomAxisMaxWidth","setBottomAxisMaxWidth","scaleX","scaleY","uniqueKey","heightFinal","bandwidth","onMouseEnter","onMouseLeave","he","bottomAxisHeightUpdated","we","axisUpdated","backgroundColor","lineHeight","Filter","handlePadding","focusedFrom","focusedTo","opacity","x2","x1","y1","y2","Focus","LineChart","svg","bottomAxisUpdated","bind","leftAxisUpdated","xAxisHeight","yAxisWidth","focusedX","focusedY","isFiltering","isExtending","isMoving","filterStart","filterEnd","filterFocused","filterFromFocused","filterToFocused","movingFromDiff","movingToDiff","extent","bottomLabelHeight","position","getBoundingClientRect","pageX","left","invert","mousePosition","bisectValue","bisector","d0","d1","focusedNode","realX","realFrom","realTo","valueLine","line","filterWidth","strokeLinejoin","strokeLinecap","FilterX","pointerEvents","onMouseMove","onMouseDown","onMouseUp","Wrapped"],"mappings":"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","file":"static/js/main.b6d5676b.chunk.js","sourcesContent":["import React from 'react';\n\ninterface IProps<T, D> {\n    title: string;\n    settings: T;\n    children: (settings: T, input: D) => any;\n    data: D;\n}\n\nconst DemoContainer = <T extends object, D extends object | number>({ children, title, settings, data }: IProps<T, D>) => {\n    const [changes, onChange] = React.useState<T>(settings);\n    const [input, setInput] = React.useState<D>(data);\n    const [isInvalid, setIsInvalid] = React.useState<boolean>(false);\n\n    return (\n        <div style={{ margin: '20px 0'}}>\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <div>\n                    <h2>{title}</h2>\n                    {Object.keys(changes).map(key => {\n                        const id = `${title}=${key}`;\n                        if (typeof changes[key] === 'number') {\n                            return (\n                                <div key={`${id}-key`}>\n\n                                    <input type=\"checkbox\" id={id} checked={!!changes[key]} onChange={({ target }) => onChange({ ...changes, [key]: target.checked ? settings[key]: 0 })} />\n\n\n                                    <label htmlFor={id}>{key}: </label>\n                                    {changes[key] !== 0 && <input type=\"number\" id={id} value={changes[key]} onChange={({ target }) => onChange({ ...changes, [key]: parseInt(target.value, 10) })} />}\n                                </div>\n                            )\n                        }\n\n\n                        return (\n                            <div key={`${id}-key`}>\n                                <input type=\"checkbox\" id={id} checked={changes[key]}\n                                       onChange={({ target }) => onChange({ ...changes, [key]: target.checked })} />\n                                <label htmlFor={id}>{key}</label>\n                            </div>\n                        )\n                    })}\n                </div>\n                <div>\n                    {children(changes, input)}\n                </div>\n                <div>\n                    <textarea\n                        style={{ height: '100%' }}\n                        rows={10}\n                        cols={50}\n                        onChange={(event) => {\n                            try {\n                                const parsed = JSON.parse(event.target.value);\n                                setInput(parsed);\n                                setIsInvalid(false);\n                            } catch (error) {\n                                setIsInvalid(true);\n                            }\n                        }}\n                        defaultValue={JSON.stringify(data, null, 2)}\n                    />\n                    <div>{isInvalid && <span>invalid JSON</span>}</div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default DemoContainer;\n","import React from 'react';\nimport { DonutChart } from '../export';\nimport DemoContainer from '../DemoContainer';\nimport './DonutChart.css';\n\nconst data = [\n    {\n        label: \"male\",\n        value: 30,\n        colour: \"#88BB88\"\n    },\n    {\n        label: \"female\",\n        value: 60,\n        colour: \"#8888CC\"\n    },\n    {\n        label: \"unknown\",\n        value: 10,\n        colour: \"#AA8888\"\n    }\n];\n\nconst DonutChartDemo: React.FC = () => {\n    const [filters, setFilters] = React.useState<string[]>([]);\n\n    const filter = (label: string) => {\n        if (filters.find(r => r === label)) {\n            setFilters(filters.filter(d => d !== label));\n        } else {\n            setFilters([...filters, label]);\n        }\n    };\n\n    return (\n        <DemoContainer title=\"Donut chart\" settings={{ customValueFormat: true, filterable: true, maxTableRows: false }} data={data}>\n            {(settings, input) => (\n                <>\n                    <DonutChart\n                        width={300}\n                        height={300}\n                        data={input}\n                        filters={settings.filterable ? filters :  undefined}\n                        onFilter={settings.filterable ? (label) => filter(label) : undefined}\n                        valueFormat={settings.customValueFormat ? (x) => `${Math.floor(x)}%` : undefined}\n                        maxTableRows={settings.maxTableRows ? 2 : undefined}\n\n                        // onMouseOver={(label) => this.setState({ focusedLabel: label })}\n                        // onMouseOut={(label) => this.setState({ focusedLabel: undefined })}\n                        // focusedLabel={this.state.focusedLabel}\n                    />\n                    <div>{settings.filterable && <pre>{JSON.stringify(filters)}</pre>}</div>\n                </>\n            )}\n        </DemoContainer>\n    )\n}\n\nexport default DonutChartDemo;\n","import React from 'react';\nimport { LineChart } from '../export';\nimport DemoContainer from '../DemoContainer';\n\nconst data = [\n    {\n        key: 1,\n        value: 50,\n    },\n    {\n        key: 2,\n        value: 20,\n    },\n    {\n        key: 3,\n        value: 40,\n    },\n    {\n        key: 5,\n        value: 30,\n    },\n    {\n        key: 6,\n        value: 10,\n    }\n];\n\nconst LineChartDemo = () => {\n    const [filter, setFilter] = React.useState<any>({ from: 3, to: 5 });\n\n    return (\n        <div>\n            <DemoContainer title=\"Line chart\" settings={{ withXLabel: true, withYLabel: true, useKeyFormat: false, useFilters: true, xLabelRotate: false, xAxisTicksTooltip: false }} data={data}>\n                {(settings, input) => {\n                    return (\n                        <div>\n                            <LineChart\n                                data={input}\n                                height={300}\n                                width={500}\n                                yAxisLabel={settings.withYLabel ? \"Y label\" : undefined}\n                                xAxisLabel={settings.withXLabel ? \"X label\" : undefined}\n                                colour=\"green\"\n                                onFilter={settings.useFilters ? ({ from, to }) => setFilter({ from, to }) : undefined}\n                                filterFrom={settings.useFilters ? filter.from : undefined}\n                                filterTo={settings.useFilters ? filter.to : undefined}\n                                keyFormat={settings.useKeyFormat ? (value) => `${value},-` : undefined}\n                                xAxisTicksRotate={settings.xLabelRotate ? -45 : undefined}\n                                xAxisTicksTooltip={settings.xAxisTicksTooltip}\n                            />\n                            {settings.useFilters && <pre>{JSON.stringify(filter)}</pre>}\n                        </div>\n                    )\n                }}\n            </DemoContainer>\n        </div>\n    )\n};\n\nexport default LineChartDemo;\n","import React from 'react';\nimport { RowChart } from '../export';\nimport DemoContainer from '../DemoContainer';\n\nconst data = [\n    {\n        key: \"a\",\n        value: 50,\n    },\n    {\n        key: \"b\",\n        value: 20,\n    },\n    {\n        key: \"c\",\n        value: 40,\n    },\n    {\n        key: \"d\",\n        value: 10,\n    }\n];\n\n\nconst RowCharDemo: React.FC = () => {\n    const [filters, setFilter] = React.useState<string[]>([]);\n    return (\n        <DemoContainer\n            title=\"Row chart\"\n            data={data}\n            settings={{\n                withXLabel: true,\n                withYLabel: true,\n                filterable: true,\n                yLabelCustomWidth: 15,\n                xLabelCustomWidth: 100,\n                customValueFormat: false,\n                customToolTipFormat: false\n            }}>\n            {(settings, input) => (\n                <div>\n                    <RowChart\n                        data={input}\n                        width={400}\n                        yAxisLabel={settings.withYLabel ? \"Y label\" : undefined}\n                        xAxisLabel={settings.withXLabel ? \"X label\" : undefined}\n                        colour=\"green\"\n                        onFilter={settings.filterable ? (filter) => setFilter([...filters, filter]) : undefined}\n                        filters={settings.filterable ? filters : undefined}\n                        labelWidth={settings.yLabelCustomWidth || undefined}\n                        valueLabelWidth={settings.xLabelCustomWidth || undefined}\n                        valueFormat={settings.customValueFormat ? (val) => `${val},-` : undefined}\n                        tooltipValueFormat={settings.customToolTipFormat ? (val) => `${val} custom tooltip` : undefined}\n                    />\n                    {settings.filterable && <pre>{JSON.stringify(filters)}</pre>}\n                </div>\n            )}\n        </DemoContainer>\n    );\n};\n\nexport default RowCharDemo;\n","import React from 'react';\nimport { BarChart } from '../export';\nimport DemoContainer from '../DemoContainer';\n\nconst BarChartDemo: React.FC = () => {\n\n    const data = [\n            { key: 'way toooo long name to show', value: 8 },\n            { key: '26.12.2020 15:40', value: 9 },\n            { key: 'another too long name', value: 10 },\n        ];\n\n    return (\n        <DemoContainer title=\"Bar chart\" settings={{ withXLabel: true, withYLabel: true, xLabelRotate: true, xAxisTicksTooltip: true }} data={data}>\n            {(settings, input) => (\n                <BarChart\n                    data={input}\n                    height={300}\n                    width={300}\n                    colour=\"green\"\n                    colours={['green', 'grey']}\n                    yAxisLabel={settings.withYLabel ? \"Y label\" : undefined}\n                    xAxisLabel={settings.withXLabel ? \"X label\" : undefined}\n                    xAxisTicksRotate={settings.xLabelRotate ? -90 : undefined}\n                    xAxisTicksTooltip={settings.xAxisTicksTooltip}\n                    keyFormat={(val) => val.length > 16 ? `${val.substring(0, 13)}...` : val}\n                    xAxisTicksTooltipFormat={(val) => `${val} ?`}\n                />)}\n        </DemoContainer>\n    );\n};\n\nexport default BarChartDemo;\n","import * as React from \"react\";\nimport { NumberChart } from '../export';\nimport DemoContainer from '../DemoContainer';\nimport './demo.css';\n\nconst NumberChartDemo: React.FC = () => {\n\n    return (\n        <DemoContainer\n            title=\"Number chart\"\n            data={50}\n            settings={{ useCustomLabel: false, useCustomValueFormat: true }}\n        >\n            {(settings, input) => (\n                <NumberChart\n                    width={200}\n                    color=\"#88BB88\"\n                    value={input}\n                    label={settings.useCustomLabel ? 'custom label' : undefined}\n                    valueFormat={settings.useCustomValueFormat ? (val) => `${Math.floor(val)},-` : undefined}\n                />\n            )}\n        </DemoContainer>\n    );\n};\n\nexport default NumberChartDemo;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport DonutChartDemo from './DonutChart/DonutChartDemo';\nimport LineChartDemo from './LineChart/LineChartDemo';\nimport RowCharDemo from './RowChart/RowCharDemo';\nimport BarChartDemo from './BarChart/BarChartDemo';\nimport NumberChartDemo from './NumberChart/NumberChartDemo';\n\nconst App = () => (\n    <div>\n        <div style={{ padding: '10px'}}>\n\n            <DonutChartDemo />\n\n            <LineChartDemo />\n\n            <RowCharDemo />\n\n            <BarChartDemo />\n\n            <NumberChartDemo />\n        </div>\n    </div>\n);\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import { hsl } from 'd3';\n\nconst equal = (a: any, b: any): boolean => a === b;\n\nexport const curry = (fn: (...x: any[]) => any) => {\n  const r = args => {\n    if (args.length >= fn.length) {\n      return fn(...args);\n    }\n    return (...secArgs) => r([...args, ...secArgs]);\n  };\n\n  return (...args) => r(args);\n};\n\nexport const prepend = curry((value: string, array: any[]): any[] => {\n  const newArray = array.slice();\n  newArray.unshift(value);\n  return newArray;\n});\n\nexport const head = (input: any) => input[0] || null;\n\nexport const tail = <T>(array: T[]): T[] => array.slice(1);\n\nexport const push = (value: any, array: any[]): any[] => {\n  const copied = array.slice();\n  copied.push(value);\n  return copied;\n};\n\nexport const prop = curry((name: string, object: object) => object[name]);\n\nexport const not = input => !input;\n\nexport const remove = curry((value: any, array: any[]): any[] => array.filter(x => !equal(x, value)));\n\ntype fnType = (...x: any) => any;\n\nexport const compose = (...fns: fnType[]) => (value: any) => fns.reduceRight((args, fn) => fn(args), value);\n\nexport const updateAt = curry((index: number, value: any, array: any[]): any[] => {\n  if (array.length <= index) {\n    return updateAt(index, value, push(null, array));\n  }\n\n  return array.map((x, i) => (equal(i, index) ? value : x));\n});\n\nconst notNull = (value: any): boolean => value !== null;\n\nexport const isOdd = (value: number): boolean => value % 2 !== 0;\n\nexport const makeEven = (valueToFill: any) => (array: any[]): any[] => (isOdd(array.length) ? push(valueToFill, array) : array);\n\nexport const join = (by: string) => array => array.map(a => (a.filter(notNull).length > 1 ? a.join(by) : null)).filter(notNull);\n\nconst reduce = (fn, array: number[]) => {\n  if (array.length === 0) {\n    return 0;\n  }\n  return array.reduce(fn);\n};\n\nexport const max = (array: number[]): number => reduce((a, b) => Math.max(a, b), array);\n// const min = (array: number[]): number => reduce((a, b) => Math.min(a, b), array);\n\nexport const maxProp = (property: string, array: object[]) => max(array.map(d => d[property]));\n\nexport const reduceAxisLabels = (width: number, values: string[]): ((label: string, index: number) => string) => {\n  const spaceForText = 15;\n  const ticks = width / spaceForText;\n\n  if (values.length > ticks) {\n    const x = Math.ceil(values.length / ticks);\n    return (label: string, index: number): string => (index % x === 0 ? label : '');\n  }\n  return (label: string, index: number): string => label;\n};\n\nexport const getColour = (colour: string, label?: string, filters: string[] = [], isFocused: boolean = false): string => {\n  const isFiltered = filters.length > 0;\n  if (isFiltered && !filters.find(f => f === label)) {\n    if (isFocused) {\n      return hsl('grey')\n        .darker(0.5)\n        .toString();\n    }\n    return 'grey';\n  }\n\n  if (isFocused) {\n    return hsl(colour)\n      .darker(0.5)\n      .toString();\n  }\n  return colour;\n};\n\nexport type Optional<T> = T | undefined;\n\n/**\n * @param {number} value\n * @param {(value: number) => string[]} formatters needs to be in order in which we want to format the {value} first\n * @returns {string}\n */\nexport const tooltipFormat = (value: number, ...formatters: Array<Optional<(value: number) => string>>): string => {\n  if (formatters.length === 0) {\n    return `${value}`;\n  }\n  const formatter = head(formatters);\n  return formatter ? formatter(value) : tooltipFormat(value, ...tail(formatters));\n};\n","import * as React from \"react\";\n\nimport { axisLeft,ScaleLinear, select } from \"d3\";\nimport { max } from \"../utils\";\n\ninterface YAxisProps {\n    scale: ScaleLinear<number, any | {}>;\n    axisWidthUpdated?: (labelMaxWidth: number) => void;\n    tickFormat?: (value: number) => string;\n}\n\nclass YAxis extends React.Component<YAxisProps, {}> {\n    // @ts-ignore\n    private axis: SVGGElement | null;\n\n    public componentDidMount() {\n        this.updateAxis();\n    }\n\n    public componentDidUpdate(prevProps: YAxisProps) {\n        this.updateAxis();\n    }\n\n    public updateAxis() {\n        // @ts-ignore\n        const axis = select(this.axis).call(axisLeft(this.props.scale).tickFormat(this.props.tickFormat || null));\n\n        if (this.props.axisWidthUpdated) {\n            // @ts-ignore\n            const widths = axis.selectAll(\"g.tick text\").nodes().map((d: SVGTextContentElement) => d.getComputedTextLength());\n\n            this.props.axisWidthUpdated(max(widths));\n        }\n    }\n\n    public render() {\n        return <g ref={(t) => (this.axis = t)} />;\n    }\n}\n\nexport default YAxis;\n","// export const letters = Array.from('ABCDEFGHIJKLMNOPQRSTUVWZ00000000000000000000000000000000000');\n\nenum LetterWidths {\n  XS = 4.45,\n  S = 5.39,\n  M = 6.13,\n  L = 7.11,\n  X = 8,\n  XL = 12,\n}\n\nconst letter = {\n  a: LetterWidths.L,\n  b: LetterWidths.X,\n  c: LetterWidths.L,\n  d: LetterWidths.X,\n  e: LetterWidths.L,\n  f: LetterWidths.M,\n  g: LetterWidths.X,\n  h: LetterWidths.X,\n  i: LetterWidths.XS,\n  j: LetterWidths.S,\n  k: LetterWidths.X,\n  l: LetterWidths.XS,\n  m: LetterWidths.XL,\n  n: LetterWidths.X,\n  o: LetterWidths.X,\n  p: LetterWidths.X,\n  q: LetterWidths.X,\n  r: LetterWidths.S,\n  s: LetterWidths.M,\n  t: LetterWidths.XS,\n  u: LetterWidths.X,\n  v: LetterWidths.X,\n  w: LetterWidths.XL,\n  x: LetterWidths.X,\n  y: LetterWidths.X,\n  z: LetterWidths.L,\n  ' ': LetterWidths.XS,\n  '.': LetterWidths.XS,\n  '1': LetterWidths.S,\n};\n\nexport const textWidth = (text: string) =>\n  Array.from(text).reduce<number>((all, current) => {\n    return all + (letter[current] || LetterWidths.L);\n  }, 0);\n","import { axisBottom, ScaleBand, ScaleLinear, select } from 'd3';\nimport * as React from 'react';\nimport { max } from '../utils';\nimport { textWidth } from './tools';\n\ninterface XAxisProps {\n    scale: ScaleBand<string> | ScaleLinear<number, number>;\n    height: number;\n    tickFormat?: (value: string, index: number) => string;\n    reduceAxisLabels?: (value: string, index: number) => string;\n    rotate?: number;\n    axisHeightUpdated?: (labelMaxWidth: number) => void;\n    xAxisTicksTooltip?: boolean;\n    xAxisTicksTooltipFormat?: (value: string, index: number) => string;\n}\n\nclass XAxis extends React.Component<XAxisProps, { label?: string }> {\n    // @ts-ignore\n    private axis: SVGGElement | null;\n\n    constructor(props: XAxisProps) {\n        super(props);\n        this.state = {\n            label: undefined,\n        }\n    }\n\n    public componentDidMount() {\n        this.updateAxis();\n    }\n\n    public componentDidUpdate(prevProps: XAxisProps) {\n        this.updateAxis();\n    }\n\n    public updateAxis() {\n        const tickFormat = (value: any, index: number): any => {\n            if (this.props.tickFormat) {\n                return this.props.tickFormat(value, index)\n            }\n            return value;\n        }\n\n        if (!this.axis) {\n            return;\n        }\n\n        // @ts-ignore\n        const selected = select(this.axis).call(axisBottom(this.props.scale).tickSize(0).tickPadding(6).tickFormat(tickFormat));\n\n        if (this.props.xAxisTicksTooltip) {\n            const format = this.props.xAxisTicksTooltipFormat ? this.props.xAxisTicksTooltipFormat : d => `${d}`;\n\n\n            selected\n                .selectAll(\"g.tick text\")\n                .attr(\"label\", format as any)\n        }\n\n        if (this.props.rotate) {\n            selected.selectAll(\"g.tick text\")\n                .style(\"text-anchor\", \"end\")\n                .attr(\"dx\", \"-10\")\n                .attr(\"dy\", \"0\")\n                .attr(\"transform\", `rotate(${this.props.rotate})`);\n\n            if (this.props.axisHeightUpdated) {\n                // @ts-ignore\n                const widths = selected.selectAll(\"g.tick text\").nodes().map((d: SVGTextContentElement) => d.getComputedTextLength());\n                this.props.axisHeightUpdated(this.getLabelsMaxHeight(widths));\n            }\n        }\n    }\n\n    public render() {\n        return (\n            <>\n                <g\n                    transform={`translate(0,${this.props.height})`}\n                    ref={(t) => (this.axis = t)}\n                    onMouseOver={(e) => {\n                        if (this.props.xAxisTicksTooltip) {\n                            // @ts-ignore\n                            const label = e.target.getAttribute('label');\n                            this.setState({ label })\n                        }\n                    }}\n                    onMouseOut={() => this.setState({ label: undefined })}\n                />\n                {this.props.xAxisTicksTooltip && this.state.label && (\n                    <g>\n                        <rect x={3} y={this.props.height - 20} height=\"18\" width={textWidth(this.state.label) + 8} style={{ fill: 'white', stroke: 'grey', strokeWidth: 1, strokeOpacity: 0.9, fillOpacity: 0.9, }} />\n                        <text x={7} y={this.props.height - 6} fontSize={14}>{this.state.label}</text>\n                    </g>\n                )}\n            </>\n        );\n    }\n\n    private getLabelsMaxHeight(widths: number[]): number {\n        const maxWidth = max(widths);\n        if (this.props.rotate) {\n            // calculate right height by sin(angle) * maxWidth\n            return Math.sin(Math.abs(this.props.rotate) * Math.PI / 180) * maxWidth;\n        }\n        return 0;\n    }\n}\n\nexport default XAxis;\n","import { arc, pie } from \"d3\";\nimport * as React from \"react\";\nimport { Motion, spring } from \"react-motion\";\n\nimport focusedHOC, { InjectedProps } from \"../focusedHOC\";\nimport { getColour, tooltipFormat } from \"../utils\";\nimport { IDonutChart, IDonutChartData } from '../interfaces';\n\nconst DonutChart = ({\n                        data = [],\n                        width,\n                        height,\n                        filters = [],\n                        onFilter,\n                        onFocus,\n                        focused,\n                        children,\n                        valueFormat,\n                        tooltipValueFormat,\n                        maxTableRows,\n                    }: IDonutChart & InjectedProps) => {\n\n    const cursor = onFilter ? \"pointer\" : \"default\";\n    const margin = { top: 10, right: 10, bottom: 10, left: 10 };\n\n    const rowHeight = 20;\n    const tableTopMargin = rowHeight;\n    const tableHeight = maxTableRows ? rowHeight * maxTableRows : rowHeight * data.length;\n    const donutHeight = height - tableHeight - tableTopMargin - margin.top - margin.left;\n    const donutWidth = width - margin.left - margin.right\n    const getPie = pie<IDonutChartData>().value((d: IDonutChartData): number => d.value);\n\n    const radius = Math.min(donutWidth, donutHeight) / 2;\n\n    const getArc: any = arc()\n        .outerRadius(radius)\n        .innerRadius(radius - (radius / 5));\n\n    return (\n        <div className=\"DonutChart\" style={{ width, height }}>\n            <svg width={donutWidth} height={donutHeight} style={{ margin: `${margin.top}px ${margin.left}px ${tableTopMargin}px ${margin.left}px`}}>\n                <g transform={`translate(${donutWidth / 2}, ${(donutHeight / 2)})`}>\n                    {getPie(data)\n                        .filter((d) => !!d.data.colour)\n                        .map((slice) => (\n                            <Motion\n                                key={`${slice.data.label}-${slice.data.value}`}\n                                defaultStyle={{\n                                    startAngle: slice.startAngle,\n                                    endAngle: slice.endAngle,\n                                    padAngle: slice.padAngle,\n                                }}\n                                style={{\n                                    startAngle: spring(slice.startAngle),\n                                    endAngle: spring(slice.endAngle),\n                                    padAngle: spring(slice.padAngle),\n                                }}\n                            >\n                                {(value) => (\n                                    <g>\n                                        <path\n                                            fill={getColour(slice.data.colour, slice.data.label, filters, slice.data.label === focused)}\n                                            d={getArc(value)}\n                                            stroke=\"white\"\n                                            strokeWidth={1}\n                                            cursor={cursor}\n                                            onClick={\n                                                onFilter\n                                                    ? (event) => onFilter(slice.data.label)\n                                                    : undefined\n                                            }\n                                            onMouseOver={() => onFocus(slice.data.label || undefined)}\n                                            onMouseOut={() => onFocus(undefined)}\n                                        />\n                                        <title>\n                                            {`${slice.data.label ? `${slice.data.label}: ` : \"\"}${tooltipFormat(slice.data.value, tooltipValueFormat, valueFormat)}`}\n                                        </title>\n                                    </g>\n                                )}\n                            </Motion>\n                        ))}\n                    {children}\n                </g>\n            </svg>\n            <table cellSpacing={0} cellPadding={0} style={{ border: 'none', borderCollapse: 'collapse', margin: `0 ${margin.left}px ${margin.bottom}px ${margin.left}px` }}>\n                {data.filter((d) => !!d.label).map(({ label, value, colour }, index) => (\n                    <Motion\n                        key={label}\n                        defaultStyle={{ x: 0 }}\n                        style={{ x: spring(value, { precision: 10 }) }}\n                    >\n                        {(val) => {\n                            if (maxTableRows && index >= maxTableRows) {\n                                return <></>;\n                            }\n                            const circleR = rowHeight / 2;\n                            const circleSize = label === focused ? circleR : 6;\n                            return (\n                                <tr\n                                    onClick={onFilter ? () => onFilter(label) : undefined}\n                                    onMouseOver={() => onFocus(label || undefined)}\n                                    onMouseOut={() => onFocus(undefined)}\n                                    style={{ cursor, height: rowHeight }}\n                                >\n                                    <td>\n                                        <svg height={rowHeight} width={rowHeight}>\n                                            <Motion defaultStyle={{ x: 0 }} style={{ x: spring(circleSize) }}>\n                                                {({ x }) => (<circle cx={circleR} cy={circleR} r={x} fill={colour} />)}\n                                            </Motion>\n                                        </svg>\n                                    </td>\n                                    <td>{label}</td>\n                                    <td>{valueFormat ? valueFormat(val.x) : val.x}</td>\n                                </tr>\n                            );\n                        }}\n                    </Motion>\n                ))}\n            </table>\n        </div>\n    );\n};\n\nexport default focusedHOC(DonutChart);\n","import { scaleBand, scaleLinear } from \"d3\";\nimport * as React from \"react\";\nimport { Motion, spring } from \"react-motion\";\n\nimport { maxProp } from \"../utils\";\nimport focusedHOC, { InjectedProps } from \"../focusedHOC\";\nimport { getColour, tooltipFormat } from \"../utils\";\nimport { IRowChart } from '../interfaces';\n\nconst RowChart: React.FC<IRowChart & InjectedProps> = ({ data = [], width, filters = [], focused, onFilter, onFocus, colour, valueFormat, tooltipValueFormat, labelWidth = 80, valueLabelWidth = 40, xAxisLabel, yAxisLabel }) => {\n    const rowHeight = 40;\n    const fontSize = 14;\n    const labelsHeight = fontSize + 4;\n    const height = rowHeight * data.length;\n    const margin = { top: 10, right: 10, bottom: 10, left: 10 };\n    const w = width - margin.left - margin.right;\n    const maxValue = maxProp(\"value\", data);\n    const labelBottomPadding = 4;\n    const valueLabelLeftPadding = 5;\n\n    const leftAxisMaxWidth = 0;\n    const tickPadding = 9;\n    const leftLabelHeight = yAxisLabel ? 19 : 0;\n\n    const xScale = scaleLinear()\n        .range([0, w - labelWidth - valueLabelWidth - valueLabelLeftPadding])\n        .domain([0, maxValue]);\n\n    const yScale = scaleBand()\n        .rangeRound([0, height - margin.top - margin.bottom])\n        .domain(data.map((d) => d.key));\n\n    return (\n        <svg width={width} height={height} className=\"RowChart\">\n            <g transform={`translate(${margin.left + leftAxisMaxWidth + tickPadding + leftLabelHeight}, ${margin.top})`}>\n                {data.map((d) => {\n                    const y = yScale(d.key) || 0;\n                    return (\n                        <g\n                            key={d.key}\n                            cursor={onFilter ? \"pointer\" : \"default\"}\n                            onClick={onFilter ? (event) => onFilter(d.key) : undefined}\n                            onMouseOver={(event) => onFocus(d.key)}\n                            onMouseOut={(event) => onFocus(undefined)}\n                        >\n                            <Motion\n                                defaultStyle={{ width: 0 }}\n                                style={{ width: spring(d.value) }}\n                            >\n                                {(style) => {\n                                    const widthScaled = xScale(style.width);\n                                    return (\n                                        <rect\n                                            fill={getColour(colour, d.key, filters, focused === d.key)}\n                                            x={labelWidth}\n                                            y={y}\n                                            width={widthScaled > 0 ? widthScaled : 0}\n                                            height={rowHeight / 2}\n                                        />\n                                    );\n                                }}\n                            </Motion>\n\n                            <text y={y + labelsHeight - labelBottomPadding} x={0} fontSize={fontSize}>{d.key}</text>\n\n                            <text y={y + labelsHeight - labelBottomPadding} x={xScale(maxValue) + labelWidth + valueLabelLeftPadding} fontSize={fontSize}>\n                                {valueFormat ? valueFormat(d.value) : d.value}\n                            </text>\n\n                            <title>\n                                {`${d.key}: ${tooltipFormat(d.value, tooltipValueFormat, valueFormat)}`}\n                            </title>\n                        </g>\n                    );\n                })}\n\n                {xAxisLabel ? (<text className=\"RowChart__label\" transform={`translate(${w / 2}, ${height})`} dy=\"-1em\" textAnchor=\"middle\" fontSize={fontSize}>{xAxisLabel}</text>) : null}\n                {yAxisLabel ? (<text className=\"RowChart__label\" transform=\"rotate(-90)\" x={-(height / 2)} y={-leftAxisMaxWidth} dy=\"-1em\" textAnchor=\"middle\" fontSize={fontSize}>{yAxisLabel}</text>) : null}\n\n            </g>\n        </svg>\n    );\n};\n\nexport default focusedHOC(RowChart);\n","import * as React from \"react\";\nimport { Motion, spring } from \"react-motion\";\n\nimport { scaleBand, scaleLinear } from \"d3\";\n\nimport { getColour, maxProp, prop, reduceAxisLabels, tooltipFormat } from \"../utils\";\nimport focusedHOC, { InjectedProps } from \"../focusedHOC\";\nimport { IBarChart } from '../interfaces';\nimport XAxis from '../Axis/XAxis';\nimport YAxis from '../Axis/YAxis';\n\nconst BarChart: React.FC<IBarChart & InjectedProps> = ({ width, height, data, filters, colour, colours, focused, keyFormat, valueFormat, tooltipValueFormat, onFilter, onFocus, xAxisTicksRotate, xAxisLabel, yAxisLabel, xAxisTicksTooltip, xAxisTicksTooltipFormat }) => {\n    const [leftAxisMaxWidth, setLeftAxisMaxWidth] = React.useState(0);\n    const [bottomAxisMaxWidth, setBottomAxisMaxWidth] = React.useState(0);\n\n    const margin = { top: 10, right: 10, bottom: 10, left: 10 };\n    const tickPadding = 9;\n    const fontSize = 14;\n    const leftLabelHeight = yAxisLabel ? 19 : 0;\n    const bottomLabelHeight = xAxisLabel ? 19 : 0;\n    const w = width - margin.left - margin.right - leftAxisMaxWidth - tickPadding - leftLabelHeight;\n    const h = height - margin.top - margin.bottom - bottomAxisMaxWidth - tickPadding - bottomLabelHeight;\n    const keys = data.map(prop(\"key\")) as string[];\n\n    const scaleX = scaleBand()\n        .range([0, w])\n        .padding(0.1)\n        .domain(keys);\n\n    const scaleY = scaleLinear()\n        .range([h, 0])\n        .domain([0, maxProp(\"value\", data)]);\n\n    const axisUpdated = (width: number) => {\n        if (leftAxisMaxWidth !== width) {\n            setLeftAxisMaxWidth(width)\n        }\n    };\n\n    const bottomAxisHeightUpdated = (height: number) => {\n        if (bottomAxisMaxWidth !== height) {\n            setBottomAxisMaxWidth(height)\n        }\n    };\n\n    return (\n        <svg width={width} height={height} className=\"BarChart\">\n            <g transform={`translate(${margin.left + leftAxisMaxWidth + tickPadding + leftLabelHeight}, ${margin.top})`}>\n                {data.map(({ key, value, uniqueKey }, index) => (\n                    <g key={uniqueKey || `${key}-${value}`}>\n                        <Motion defaultStyle={{ x: h }} style={{ x: spring(scaleY(value)) }}>\n                            {({ x }) => {\n                                const heightFinal = h - x;\n                                const c = colours && colours[index] ? colours[index] : colour;\n\n                                return (\n                                    <rect\n                                        x={scaleX(key)}\n                                        y={x}\n                                        cursor={onFilter ? \"pointer\" : \"default\"}\n                                        width={scaleX.bandwidth()}\n                                        height={heightFinal > 0 ? heightFinal : 0}\n                                        fill={getColour(c, key, filters, focused === key)}\n                                        onClick={onFilter ? () => onFilter(key) : undefined}\n                                        onMouseEnter={() => onFocus(key)}\n                                        onMouseLeave={() => onFocus(undefined)}\n                                    />\n                                );\n                            }}\n                        </Motion>\n\n                        <title>\n                            {`${key}: ${tooltipFormat(value, tooltipValueFormat, valueFormat)}`}\n                        </title>\n                    </g>\n                ))}\n\n                <XAxis\n                    height={h}\n                    scale={scaleX}\n                    rotate={xAxisTicksRotate}\n                    reduceAxisLabels={reduceAxisLabels(w, keys)}\n                    tickFormat={keyFormat}\n                    axisHeightUpdated={(he) => bottomAxisHeightUpdated(he)}\n                    xAxisTicksTooltip={xAxisTicksTooltip}\n                    xAxisTicksTooltipFormat={xAxisTicksTooltipFormat}\n                />\n                <YAxis scale={scaleY} tickFormat={valueFormat} axisWidthUpdated={(we) => axisUpdated(we)} />\n\n                {xAxisLabel ? (<text className=\"BarChart__label\" transform={`translate(${w / 2}, ${height})`} dy=\"-1em\" textAnchor=\"middle\" fontSize={fontSize}>{xAxisLabel}</text>) : null}\n                {yAxisLabel ? (<text className=\"BarChart__label\" transform=\"rotate(-90)\" x={-(height / 2)} y={-leftAxisMaxWidth} dy=\"-1em\" textAnchor=\"middle\" fontSize={fontSize}>{yAxisLabel}</text>) : null}\n            </g>\n        </svg>\n    );\n}\n\nexport default focusedHOC(BarChart);\n","export { default as DonutChart } from './DonutChart/DonutChart';\nexport { default as RowChart } from './RowChart/RowChart';\nexport { default as BarChart } from './BarChart/BarChart';\nexport { default as LineChart } from './LineChart/LineChart';\nexport { default as NumberChart } from './NumberChart/NumberChart';\n\nexport * from './interfaces';\n","import * as React from \"react\";\nimport { Motion, spring } from 'react-motion';\n\nimport focusedHOC from \"../focusedHOC\";\nimport { tooltipFormat } from \"../utils\";\nimport { INumberChart } from '../interfaces';\n\nconst NumberChart: React.FC<INumberChart> = ({ value, label, valueFormat, tooltipValueFormat, width , color, children }) => {\n    return (\n        <div\n            className=\"NumberChart\"\n            title={`${label ? `${label}: ` : \"\"}${tooltipFormat(value, tooltipValueFormat, valueFormat)}`}\n            style={{ width: `${width}px`, height: `${width}px`, backgroundColor: color, lineHeight: `${width}px` }}\n        >\n            {children}\n\n            <Motion\n                key={label}\n                defaultStyle={{ x: 0 }}\n                style={{ x: spring(value, { precision: 10 }) }}\n            >\n                {(val) => <div className=\"value\">{valueFormat ? valueFormat(val.x) : val.x}</div>}\n            </Motion>\n        </div>\n    );\n};\n\nexport default focusedHOC(NumberChart);\n","import * as React from \"react\";\n\ninterface Props {\n  height: number;\n  width: number;\n  x: number;\n  colour: string;\n  handlePadding: number;\n\n  focusedFrom: boolean;\n  focusedTo: boolean;\n}\n\nconst Filter = ({\n  height,\n  width,\n  x,\n  colour,\n  handlePadding,\n  focusedFrom,\n  focusedTo,\n}: Props) => {\n  const strokeWidth = handlePadding * 2;\n  return (\n    <g>\n      <rect\n        x={x}\n        y={0}\n        width={width}\n        height={height}\n        cursor=\"move\"\n        fill={colour}\n        opacity={0.5}\n      />\n      <line\n        x2={x}\n        x1={x}\n        y1={0}\n        y2={height}\n        stroke={focusedFrom ? \"grey\" : \"lightgrey\"}\n        strokeWidth={strokeWidth}\n      />\n      <line\n        x2={x + width}\n        x1={x + width}\n        y1={0}\n        y2={height}\n        stroke={focusedTo ? \"grey\" : \"lightgrey\"}\n        strokeWidth={strokeWidth}\n      />\n    </g>\n  );\n};\n\nexport default Filter;\n","import * as React from \"react\";\n\ninterface Props {\n  height: number;\n  x: number;\n  y: number;\n}\n\nconst Focus = ({ height, x, y }: Props) => (\n  <g>\n    <line x1={0} x2={x} y1={y} y2={y} stroke=\"lightgrey\" strokeWidth=\"1\" />\n    <line x1={x} x2={x} y1={y} y2={height} stroke=\"lightgrey\" strokeWidth=\"1\" />\n    <circle r={4} cx={x} cy={y} />\n  </g>\n);\n\nexport default Focus;\n","import * as React from \"react\";\n\nimport { bisector, extent, line, scaleLinear, } from \"d3\";\n\nimport XAxis from \"../Axis/XAxis\";\nimport YAxis from \"../Axis/YAxis\";\nimport FilterX from \"./FilterX\";\nimport Focus from \"./Focus\";\nimport { ILineChart, ILineChartData } from '../interfaces';\n\nconst margin = { top: 10, right: 10, bottom: 20, left: 20 };\n\nconst filterHandlePadding = 2; // px\n\ninterface State {\n    xAxisHeight: number;\n    yAxisWidth: number;\n\n    focusedX: number;\n    focusedY: number;\n\n    isFocused: boolean;\n    isFiltering: boolean;\n    isExtending: boolean;\n    isMoving: boolean;\n\n    filterStart?: number;\n    filterEnd?: number;\n\n    filterFocused: boolean;\n    filterFromFocused: boolean;\n    filterToFocused: boolean;\n\n    movingFromDiff?: number;\n    movingToDiff?: number;\n}\n\nclass LineChart extends React.Component<ILineChart, State> {\n    private svg = React.createRef<any>();\n\n    constructor(props: ILineChart) {\n        super(props);\n        this.bottomAxisUpdated = this.bottomAxisUpdated.bind(this);\n        this.leftAxisUpdated = this.leftAxisUpdated.bind(this);\n\n        this.state = {\n            xAxisHeight: 0,\n            yAxisWidth: 0,\n\n            focusedX: 0,\n            focusedY: 0,\n\n            isFocused: false,\n            isFiltering: false,\n            isExtending: false,\n            isMoving: false,\n\n            filterStart: 0,\n            filterEnd: 0,\n\n            filterFocused: false,\n            filterFromFocused: false,\n            filterToFocused: false,\n\n            movingFromDiff: undefined,\n            movingToDiff: undefined,\n        };\n    }\n\n    public scaleX() {\n        const leftLabelHeight = this.state.yAxisWidth ? 19 : 0;\n        const w = this.props.width - margin.left - margin.right - this.state.yAxisWidth - leftLabelHeight;\n\n        return scaleLinear()\n            .rangeRound([0, w])\n            .domain(extent(this.props.data, (d) => d.key) as number[]);\n    }\n\n    public scaleY() {\n        const bottomLabelHeight = this.props.xAxisLabel ? 19 : 0;\n        const h = this.props.height - margin.top - margin.bottom - this.state.xAxisHeight - bottomLabelHeight;\n        return scaleLinear()\n            .rangeRound([h, 0])\n            .domain(extent(this.props.data, (d) => d.value) as number[]);\n    }\n\n    public mousePosition(event: MouseEvent) {\n        const position = this.svg.current.getBoundingClientRect();\n        const leftLabelHeight = this.state.yAxisWidth ? 19 : 0;\n        const x = event.pageX - margin.left - this.state.yAxisWidth - position.left - leftLabelHeight;\n\n        return this.scaleX().invert(x);\n    }\n\n    public onMouseMove(event: MouseEvent) {\n        const x = this.mousePosition(event);\n\n        if (this.state.isMoving) {\n            this.setState({\n                filterStart: x - (this.state.movingFromDiff || 0),\n                filterEnd: x + (this.state.movingToDiff || 0),\n            });\n        } else if (this.state.isExtending) {\n            this.setState({\n                filterEnd: x,\n            });\n        } else if (this.state.isFiltering) {\n            this.setState({\n                filterEnd: x,\n                filterToFocused: true,\n            });\n        } else if (this.state.isFocused) {\n            const { data } = this.props;\n\n            const bisectValue = bisector<ILineChartData, number>((d) => d.key).left;\n\n            const i = bisectValue(data, x);\n            const d0 = data[i - 1];\n            const d1 = data[i];\n\n            if (!d0) {\n                return;\n            }\n            if (!d1) {\n                return;\n            }\n\n            const focusedNode = x - d0.key > d1.key - x ? d1 : d0;\n\n            const scaleX = this.scaleX();\n            const realX = scaleX(x);\n\n            let filterFocused = false;\n            let filterToFocused = false;\n            let filterFromFocused = false;\n            if (this.props.filterFrom && this.props.filterTo) {\n                const realFrom = scaleX(this.props.filterFrom);\n                const realTo = scaleX(this.props.filterTo);\n\n                if (\n                    realX - filterHandlePadding < realTo &&\n                    realTo < realX + filterHandlePadding\n                ) {\n                    filterToFocused = true;\n                } else if (\n                    realX - filterHandlePadding < realFrom &&\n                    realFrom < realX + filterHandlePadding\n                ) {\n                    filterFromFocused = true;\n                } else if (\n                    realFrom + filterHandlePadding <= realX &&\n                    realX <= realTo - filterHandlePadding\n                ) {\n                    filterFocused = true;\n                }\n            }\n\n            this.setState({\n                focusedX: scaleX(focusedNode.key),\n                focusedY: this.scaleY()(focusedNode.value),\n                filterFocused,\n                filterFromFocused,\n                filterToFocused,\n            });\n        }\n    }\n\n    public onMouseDown(event: MouseEvent) {\n        const x = this.mousePosition(event);\n\n        if (this.state.filterFocused) {\n            this.setState({\n                filterStart: this.props.filterFrom,\n                filterEnd: this.props.filterTo,\n                isMoving: true,\n                movingFromDiff: x - (this.props.filterFrom || 0),\n                movingToDiff: (this.props.filterTo || 0) - x,\n                isFocused: false,\n            });\n        } else if (this.state.filterToFocused) {\n            // extending from Right\n            this.setState({\n                filterStart: this.props.filterFrom,\n                filterEnd: this.props.filterTo,\n                isExtending: true,\n                isFocused: false,\n            });\n        } else if (this.state.filterFromFocused) {\n            // extending from Left\n            this.setState({\n                filterStart: this.props.filterTo,\n                filterEnd: this.props.filterFrom,\n                isExtending: true,\n                isFocused: false,\n            });\n        } else {\n            // filtering\n            this.setState({\n                filterStart: x,\n                filterEnd: x,\n                isFiltering: true,\n                isFocused: false,\n            });\n        }\n    }\n\n    public onMouseUp() {\n        if (this.props.onFilter) {\n            const { filterStart, filterEnd } = this.state;\n\n            let from = filterStart;\n            let to = filterEnd;\n            if (filterStart && filterEnd && filterStart > filterEnd) {\n                from = filterEnd;\n                to = filterStart;\n            } else if (from === to) {\n                from = undefined;\n                to = undefined;\n            }\n\n            if (!from || !to) {\n                from = undefined;\n                to = undefined;\n            }\n\n            this.props.onFilter({ from, to });\n        }\n\n        this.setState({\n            filterStart: undefined,\n            filterEnd: undefined,\n            isFocused: true,\n            isFiltering: false,\n            isExtending: false,\n            isMoving: false,\n            movingFromDiff: undefined,\n            movingToDiff: undefined,\n        });\n    }\n\n    public cursor() {\n        if (!this.props.onFilter) {\n            return \"default\";\n        }\n        if (this.state.filterFocused) {\n            return \"move\";\n        }\n\n        if (this.state.filterFromFocused) {\n            return \"ew-resize\";\n        }\n\n        if (this.state.filterToFocused) {\n            return \"ew-resize\";\n        }\n        return \"crosshair\";\n    }\n\n    private bottomAxisUpdated(height: number) {\n        if (this.state.xAxisHeight !== height) {\n            this.setState({ xAxisHeight: height })\n        }\n    }\n\n    private leftAxisUpdated(width: number) {\n        if (this.state.yAxisWidth !== width) {\n            this.setState({ yAxisWidth: width })\n        }\n    }\n\n    public render() {\n        const { data, width, height, xAxisLabel, yAxisLabel, valueFormat, keyFormat, colour, xAxisTicksTooltip } = this.props;\n        const leftLabelHeight = yAxisLabel ? 19 : 0;\n        const bottomLabelHeight = xAxisLabel ? 19 : 0;\n        const h = height - margin.top - margin.bottom - this.state.xAxisHeight - bottomLabelHeight;\n        const scaleX = this.scaleX();\n\n        const valueLine: any = line()\n            .x((d: any) => scaleX(d.key))\n            .y((d: any) => this.scaleY()(d.value));\n\n        const filterFrom = this.props.filterFrom || 0;\n        const filterTo = this.props.filterTo || 0;\n\n        let filterStart = scaleX(Math.min(filterFrom, filterTo));\n        let filterWidth = Math.abs(scaleX(filterFrom) - scaleX(filterTo));\n\n        if (\n            this.state.isFiltering ||\n            this.state.isExtending ||\n            this.state.isMoving\n        ) {\n            filterStart = scaleX(\n                Math.min(this.state.filterStart || 0, this.state.filterEnd || 0),\n            );\n            filterWidth =\n                this.state.filterEnd === 0\n                    ? 0\n                    : Math.abs(\n                    scaleX(this.state.filterStart || 0) -\n                    scaleX(this.state.filterEnd || 0),\n                    );\n        }\n\n        const isFiltered = this.state.isFiltering || this.state.isExtending || filterFrom;\n\n        return (\n            <svg width={width} height={height} ref={this.svg}>\n                <g transform={`translate(${margin.left + this.state.yAxisWidth + leftLabelHeight}, ${margin.top})`}>\n                    <XAxis\n                        height={h}\n                        scale={this.scaleX()}\n                        tickFormat={keyFormat}\n                        rotate={this.props.xAxisTicksRotate}\n                        axisHeightUpdated={this.bottomAxisUpdated}\n                        xAxisTicksTooltip={xAxisTicksTooltip}\n                    />\n                    <YAxis\n                        scale={this.scaleY()}\n                        tickFormat={valueFormat}\n                        axisWidthUpdated={this.leftAxisUpdated}\n                    />\n\n                    <path\n                        d={valueLine(data)}\n                        fill=\"none\"\n                        stroke={colour}\n                        strokeWidth={1.5}\n                        strokeLinejoin=\"round\"\n                        strokeLinecap=\"round\"\n                    />\n\n                    {this.state.isFocused ? (\n                        <Focus x={this.state.focusedX} y={this.state.focusedY} height={h} />) : null}\n                    {isFiltered ? (\n                        <FilterX\n                            height={h}\n                            x={filterStart}\n                            width={filterWidth}\n                            colour={colour}\n                            handlePadding={filterHandlePadding}\n                            focusedFrom={this.state.filterFromFocused}\n                            focusedTo={this.state.filterToFocused}\n                        />\n                    ) : null}\n\n                    <rect\n                        fill=\"none\"\n                        pointerEvents=\"all\"\n                        cursor={this.cursor()}\n                        width={width - margin.left - margin.right - this.state.yAxisWidth - leftLabelHeight}\n                        height={height - margin.top - margin.bottom - bottomLabelHeight}\n                        onMouseMove={(event: any) => this.onMouseMove(event)}\n                        onMouseOut={() => this.setState({ isFocused: false })}\n                        onMouseOver={() => this.setState({ isFocused: true })}\n                        onMouseDown={(event: any) => this.props.onFilter ? this.onMouseDown(event) : null}\n                        onMouseUp={(event: any) => this.props.onFilter ? this.onMouseUp() : null}\n                    />\n\n                    {xAxisLabel ? <text transform={`translate(${width / 2}, ${height})`} dy=\"-1em\" textAnchor=\"middle\" fontSize={14}>{xAxisLabel}</text> : null}\n\n                    {yAxisLabel ? <text transform=\"rotate(-90)\" y={-this.state.yAxisWidth} x={-(height / 2)} dy=\"-1em\" textAnchor=\"middle\" fontSize={14}>{yAxisLabel}</text> : null}\n\n                </g>\n            </svg>\n        );\n    }\n}\n\nexport default LineChart;\n","import * as React from \"react\";\n\nexport interface InjectedProps {\n  focused?: string;\n  onFocus: (label: string | undefined) => void;\n}\n\ninterface State {\n  focused?: string;\n}\n\nfunction focusedHOC<P>(Wrapped: React.ComponentClass<P & InjectedProps> | React.StatelessComponent<P & InjectedProps>): React.ComponentClass<P> {\n  return class extends React.Component<P, State> {\n    constructor(props: P) {\n      super(props);\n      this.state = {\n        focused: undefined,\n      };\n    }\n\n    public render() {\n      return (\n        <Wrapped\n          {...this.props}\n          onFocus={(focused) => this.setState({ focused })}\n          focused={this.state.focused}\n        />\n      );\n    }\n  };\n}\n\nexport default focusedHOC;\n"],"sourceRoot":""}